digraph "classes_P1" {
rankdir=BT
charset="utf-8"
"omega_class.BinarySameRoomConstraint" [color="black", fontcolor="black", label=<{BinarySameRoomConstraint|courses<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|is_satisfied(c1, c2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.BinaryTimeConstraint" [color="black", fontcolor="black", label=<{BinaryTimeConstraint|courses<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|check(value1, value2)<br ALIGN="LEFT"/>is_satisfied(c2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.ConstraintFactory" [color="black", fontcolor="black", label=<{ConstraintFactory|courses<br ALIGN="LEFT"/>professors<br ALIGN="LEFT"/>rooms<br ALIGN="LEFT"/>|create_constraint(constraint_def)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.NaryConstraint" [color="black", fontcolor="black", label=<{NaryConstraint|<br ALIGN="LEFT"/>|<I>is_satisfied</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.PreferredProfConstraint" [color="black", fontcolor="black", label=<{PreferredProfConstraint|courses<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>|get_valid_assignments()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.PreferredTimeConstraint" [color="black", fontcolor="black", label=<{PreferredTimeConstraint|courses<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>|get_valid_assignments()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.Professor" [color="black", fontcolor="black", label=<{Professor|availability<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|add_slot(timeslot)<br ALIGN="LEFT"/>remove_slot(timeslot)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.Room" [color="black", fontcolor="black", label=<{Room|availability<br ALIGN="LEFT"/>capacity<br ALIGN="LEFT"/>room_code<br ALIGN="LEFT"/>|add_slot(timeslot)<br ALIGN="LEFT"/>remove_slot(timeslot)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.availability" [color="black", fontcolor="black", label=<{availability|timeslots : NoneType, list<br ALIGN="LEFT"/>|add_slot(timeslot)<br ALIGN="LEFT"/>fill_availability()<br ALIGN="LEFT"/>remove_slot(timeslot)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.course_prof_observer" [color="black", fontcolor="black", label=<{course_prof_observer|course_prof_ranked<br ALIGN="LEFT"/>|add_prof(course_code, rank, prof)<br ALIGN="LEFT"/>remove_prof(course_code, prof)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.course_struct" [color="black", fontcolor="black", label=<{course_struct|constraints : list<br ALIGN="LEFT"/>course_code<br ALIGN="LEFT"/>dep<br ALIGN="LEFT"/>enrollment : int<br ALIGN="LEFT"/>professor<br ALIGN="LEFT"/>room<br ALIGN="LEFT"/>time_slot<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"omega_class.csp_course_dom" [color="black", fontcolor="black", label=<{csp_course_dom|course_list<br ALIGN="LEFT"/>course_prof_observer<br ALIGN="LEFT"/>room_list<br ALIGN="LEFT"/>soft_constraints : NoneType<br ALIGN="LEFT"/>|generate_domains()<br ALIGN="LEFT"/>generate_neighbours()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.deserializer" [color="black", fontcolor="black", label=<{deserializer|course_prof_ranked : dict<br ALIGN="LEFT"/>courses : list<br ALIGN="LEFT"/>json_path<br ALIGN="LEFT"/>professors : list<br ALIGN="LEFT"/>rooms : list<br ALIGN="LEFT"/>soft_constraints : list<br ALIGN="LEFT"/>|deserialize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.timeslot" [color="black", fontcolor="black", label=<{timeslot|day<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>|randomize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"omega_class.BinaryTimeConstraint" -> "omega_class.NaryConstraint" [arrowhead="empty", arrowtail="none"];
"omega_class.availability" -> "omega_class.Room" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="availability", style="solid"];
}
